<Window x:Class="WPF_Fancy_CRUD.MVVM.Views.LoginView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Fancy_CRUD.MVVM.Views"
        xmlns:viewModel="clr-namespace:WPF_Fancy_CRUD.MVVM.ViewModels"
        xmlns:customControls="clr-namespace:WPF_Fancy_CRUD.MVVM.Views.CustomControls"
        mc:Ignorable="d"
        Title="LoginView" Height="550" Width="800"
        WindowStyle="None"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        MouseDown="Window_MouseDown"
        Background="Transparent"
        AllowsTransparency="True">


    <!-- Se establece el modelo de vista como contexto de datos de la vista. Es decir, se declara el modelo de vista a usar en esta vista -->
    <Window.DataContext>
        <viewModel:LoginViewModel/>
    </Window.DataContext>

    <!-- BooleanToVisibilityConverter es una clase nativa de c# que representa al convertidor que convierte valores booleanos hacia y desde valores de enumeración de Visibility. El ID que se da (o sea el Key) puede ser el que sea. En pocas palabras, en estas líneas creamos un convertidor llamado BooleanToVisibility que convierte valores Bool a Visibility. -->
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
    </Window.Resources>

    <!-- Se vinculan las propiedades de vista a las propiedades del modelo de vista. -->
    <!-- Por ejemplo, la propiedad de visibilidad de la ventana de login dependerá de la propiedad VistaEsVisible del LoginViewModel, ya que si el inicio de sesión es exitoso debemos ocultar esta vista. En este caso específico se necesita un convertidor de tipos, ya que VistaEsVisible es un bool, y la propiedad Visibility de la ventana es tipo Visibilidad, para lo cual se convierte el boleano a visibility mediante BooleanToVisibility -->
    <Window.Visibility>
        <Binding Path="VistaEsVisible" Mode="TwoWay" Converter="{StaticResource BooleanToVisibility}"/>
    </Window.Visibility>


    <!--
        Puesto que no es posible personalizar borde con esquinas redondeadas en la ventana, por eso se usa una etiqueta Border. Ésta permite poner el color de background y el color de borde exterior mediante las propiedades Background y BorderBrush. Sin embargo, aquí las quitamos porque ambas cosas las queremos muy personalizadas (con gradientes), y para eso usamos otras etiquetas.
    -->

    <Border CornerRadius="35"
            BorderThickness="5">

        <Border.Background>
            <ImageBrush ImageSource="/WPF-Fancy-CRUD;Component/Assets/Images/back-image.jpg"/>
        </Border.Background>

        <Border CornerRadius="30"
                BorderThickness="5"
                Opacity="0.85">

            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="{StaticResource winBorderColor1}" Offset="0"></GradientStop>
                    <GradientStop Color="{StaticResource winBorderColor2}" Offset="0.75"></GradientStop>
                    <GradientStop Color="{StaticResource winBorderColor3}" Offset="1"></GradientStop>
                </LinearGradientBrush>
            </Border.BorderBrush>

            <Border.Background>
                <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                    <GradientStop Color="{StaticResource primaryBackColor1}" Offset="0"></GradientStop>
                    <GradientStop Color="{StaticResource primaryBackColor2}" Offset="0.75"></GradientStop>
                </LinearGradientBrush>
            </Border.Background>

            <Grid>
                <!--
                    Tomar en cuenta que la definición de filas y columnas NO es como una tabla HTML, en donde definimos las filas, y dentro de las filas ponemos las celdas para cada columna. Aquí se definen los elementos separados.
                    Se definen las filas, la 1ra es la que contendrá los botones minimizar, restaurar y cerrar. La 2da es la que contendrá el contenido propio de la ventana.
                -->
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="25"/>
                        <ColumnDefinition Width="25"/>
                        <ColumnDefinition Width="5"/>
                    </Grid.ColumnDefinitions>

                    <!--
                        La propiedad Grid.Column hace referencia al número ordinal en que debe ubicarse el control. Es decir, al número de columna
                    -->
                    <TextBlock Text="LOG IN"
                           Foreground="DarkGray"
                           FontSize="10"
                           FontFamily="Montserrat"
                           Grid.Column="0"
                           VerticalAlignment="Center"
                           Margin="10,0,0,0"/>

                    <Button x:Name="btnMinimize"
                        BorderThickness="0"
                        Content="-"
                        Foreground="White"
                        FontSize="16"
                        FontFamily="Montserrat"
                        Cursor="Hand"
                        Grid.Column="1"
                        Click="BtnMinimize_Click">
                        <!--
                            WPF no permite personalizar el hover de los botones. Por tanto, se elimina la propiedad Background del botón y se elimina la plantilla por defecto del botón:
                        -->
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="#28AEED"/>
                                <!-- Se declara un disparador para que ejecute algo (en este caso cambio de color de fondo del botón) cuando se dé un MouseOver -->
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#278BEF"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <!-- Con este binding vinculamos y sincronizamos el color de background al color del borde -->
                                <Border Width="18" Height="18" CornerRadius="9" Background="{TemplateBinding Background}">
                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <Button x:Name="btnClose"
                        BorderThickness="0"
                        Content="x"
                        Foreground="White"
                        FontSize="12"
                        FontFamily="Montserrat"
                        Cursor="Hand"
                        Grid.Column="2"
                        Click="BtnClose_Click">
                        <!--
                            WPF no permite personalizar el hover de los botones. Por tanto, se elimina la propiedad Background del botón y se elimina la plantilla por defecto del botón:
                        -->
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="{StaticResource color4}"/>
                                <!-- Se declara un disparador para que ejecute algo (en este caso cambio de color de fondo del botón) cuando se dé un MouseOver -->
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource color4}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <!-- Con este binding vinculamos y sincronizamos el color de background al color del borde -->
                                <Border Width="18"
                                        Height="18"
                                        CornerRadius="9"
                                        Background="{TemplateBinding Background}">
                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>


                </Grid>

                <StackPanel Width="250"
                            Grid.Row="2"
                            Orientation="Vertical"
                            Margin="0,35,0,0">

                    <Image Source="/WPF-Fancy-CRUD;Component/Assets/Images/logo.png"
                           Width="100"
                           Height="100"/>

                    <TextBlock Text="Durán"
                               Foreground="White"
                               FontSize="25"
                               FontWeight="Medium"
                               FontFamily="Montserrat"
                               HorizontalAlignment="Center"/>
                    <TextBlock Text="Lorem ipsum dolor sit amet"
                               Foreground="LightGray"
                               FontSize="12"
                               FontWeight="Medium"
                               FontFamily="Montserrat"
                               TextWrapping="Wrap"
                               TextAlignment="center"
                               Margin="0,5,0,0"/>
                    <TextBlock Text="Usuario"
                               Foreground="DarkGray"
                               FontSize="12"
                               FontWeight="Medium"
                               FontFamily="Montserrat"
                               Margin="0,35,0,0"/>

                    <!--
                        Sobre el Binding en los TextBox y PasswordBox.
                        Es necesario actualizar el origen del enlace cada vez que cambia la propiedad del cuadro de texto.
                    -->
                    <TextBox x:Name="txtUser"
                             Text="{Binding Usuario, UpdateSourceTrigger=PropertyChanged}"
                             FontSize="13"
                             FontWeight="Medium"
                             FontFamily="Montserrat"
                             Foreground="White"
                             CaretBrush="LightGray"
                             BorderBrush="DarkGray"
                             BorderThickness="0,0,0,1"
                             Height="28"
                             VerticalContentAlignment="Center"
                             Margin="0,5,0,0"
                             Padding="20,0,0,0"
                             KeyDown="EnviarFormulario">
                        <!-- No existe opción para poner un ícono al lado izquierdo. Como alternativa se pone como background (recordar que para que esto funcione es necesario eliminar la propiedad background de TextBox). Dimensiones ícono 150 x 150 pixeles -->

                        <TextBox.Background>
                            <ImageBrush ImageSource="/WPF-Fancy-CRUD;Component/Assets/Images/user-icon.png" Stretch="None" AlignmentX="Left"/>
                        </TextBox.Background>

                    </TextBox>

                    <TextBlock Text="Contraseña"
                               Foreground="DarkGray"
                               FontSize="12"
                               FontWeight="Medium"
                               FontFamily="Montserrat"
                               Margin="0,15,0,0"/>
                    <!--
                        Salta error cuando se declara binding sobre un PasswordBox. Para ello a fuerza hay que crear un control personalizado.

                        1. El control PasswordBox se mete dentro de un nuevo archivo tipo "Control de usuario"
                            1. Agregar > Control de usuario
                            2. BlindablePasswordBox.xaml
                                Dentro pegamos el código del PasswordBox.
                                Puesto que dentro de un "Control de usuario" no es posible declarar el Height y Margin, se los quitamos al PasswordBox (estas propiedades deben declararse directo en la vista).
                        2. Crear propiedad de dependencia
                            Se edita el code-behind del archivo "Control de Usuario".
                    -->

                    <customControls:BindablePasswordBox Password="{Binding Contrasena, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        Height="28"
                                                        Margin="0,5,0,0"
                                                        KeyDown="EnviarFormulario">
                    </customControls:BindablePasswordBox>

                    <!--
                        Creamos un TextBlock que mostrará los posibles errores al iniciar sesión
                    -->
                    <TextBlock Text="{Binding MensajeError}"
                               Foreground="{StaticResource color4}"
                               FontSize="12"
                               FontWeight="Medium"
                               FontFamily="Montserrat"
                               Margin="0,10,0,0"
                               TextWrapping="Wrap"/>

                    <Button x:Name="btnLogin"
                        Command="{Binding LoginCommand}"
                        BorderThickness="0"
                        Content="Iniciar sesión"
                        Foreground="White"
                        FontSize="12"
                        FontFamily="Montserrat"
                        Cursor="Hand"
                        Margin="0,30,0,0">
                        <!--
                            WPF no permite personalizar el hover de los botones. Por tanto, se elimina la propiedad Background del botón y se elimina la plantilla por defecto del botón:
                        -->
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="#462ad8"/>
                                <!-- Se declara un disparador para que ejecute algo (en este caso cambio de color de fondo del botón) cuando se dé un MouseOver -->
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#28aeed"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <!-- Con este binding vinculamos y sincronizamos el color de background al color del borde -->
                                <Border Width="150"
                                        Height="40"
                                        CornerRadius="20"
                                        Background="{TemplateBinding Background}">
                                    <ContentPresenter VerticalAlignment="Center"
                                                      HorizontalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <StackPanel Orientation="Horizontal"
                                HorizontalAlignment="Center"
                                Margin="0,15,0,0">
                        <TextBlock Text="¿Olvidaste contraseña?"
                                   Foreground="DarkGray"
                                   FontSize="12"
                                   FontWeight="Medium"
                                   FontFamily="Montserrat"/>
                        <TextBlock Text="Reset"
                                   Foreground="White"
                                   FontSize="12"
                                   FontWeight="Medium"
                                   FontFamily="Montserrat"
                                   Cursor="Hand"
                                   Margin="8,0,0,0"/>
                    </StackPanel>

                </StackPanel>

            </Grid>
        </Border>
    </Border>

</Window>
